/**
 * dbconfigType.java
 *
 * This file was generated by XMLSpy 2006r3sp1 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.dbconfig;

import com.altova.types.*;

public class dbconfigType extends com.altova.xml.Node {

	public dbconfigType(dbconfigType node) {
		super(node);
	}

	public dbconfigType(org.w3c.dom.Node node) {
		super(node);
	}

	public dbconfigType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public dbconfigType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "dbname" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "dbname", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "projectionList" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "projectionList", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new projectionListType(tmpNode).adjustPrefix();
		}
	}

	public static int getdbnameMinCount() {
		return 1;
	}

	public static int getdbnameMaxCount() {
		return 1;
	}

	public int getdbnameCount() {
		return getDomChildCount(Element, null, "dbname");
	}

	public boolean hasdbname() {
		return hasDomChild(Element, null, "dbname");
	}

	public com.altova.xml.AnyTypeNode newdbname() {
		return new com.altova.xml.AnyTypeNode(domNode.getOwnerDocument().createElementNS(null, "dbname"));
	}

	public com.altova.xml.AnyTypeNode getdbnameAt(int index) throws Exception {
		return new com.altova.xml.AnyTypeNode(dereference(getDomChildAt(Element, null, "dbname", index)));
	}

	public org.w3c.dom.Node getStartingdbnameCursor() throws Exception {
		return getDomFirstChild(Element, null, "dbname" );
	}

	public org.w3c.dom.Node getAdvanceddbnameCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "dbname", curNode );
	}

	public com.altova.xml.AnyTypeNode getdbnameValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new com.altova.xml.AnyTypeNode( dereference(curNode) );
	}

	public com.altova.xml.AnyTypeNode getdbname() throws Exception 
 {
		return getdbnameAt(0);
	}

	public void removedbnameAt(int index) {
		removeDomChildAt(Element, null, "dbname", index);
	}

	public void removedbname() {
		removedbnameAt(0);
	}

	public void adddbname(com.altova.xml.AnyTypeNode value) {
		appendDomElement(null, "dbname", value);	
	}

	public void insertdbnameAt(com.altova.xml.AnyTypeNode value, int index) {
		insertDomElementAt(null, "dbname", index, value);
	}

	public void replacedbnameAt(com.altova.xml.AnyTypeNode value, int index) {
		replaceDomElementAt(null, "dbname", index, value);
	}

	public static int getprojectionListMinCount() {
		return 1;
	}

	public static int getprojectionListMaxCount() {
		return 1;
	}

	public int getprojectionListCount() {
		return getDomChildCount(Element, null, "projectionList");
	}

	public boolean hasprojectionList() {
		return hasDomChild(Element, null, "projectionList");
	}

	public projectionListType newprojectionList() {
		return new projectionListType(domNode.getOwnerDocument().createElementNS(null, "projectionList"));
	}

	public projectionListType getprojectionListAt(int index) throws Exception {
		return new projectionListType(dereference(getDomChildAt(Element, null, "projectionList", index)));
	}

	public org.w3c.dom.Node getStartingprojectionListCursor() throws Exception {
		return getDomFirstChild(Element, null, "projectionList" );
	}

	public org.w3c.dom.Node getAdvancedprojectionListCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "projectionList", curNode );
	}

	public projectionListType getprojectionListValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new projectionListType( dereference(curNode) );
	}

	public projectionListType getprojectionList() throws Exception 
 {
		return getprojectionListAt(0);
	}

	public void removeprojectionListAt(int index) {
		removeDomChildAt(Element, null, "projectionList", index);
	}

	public void removeprojectionList() {
		removeprojectionListAt(0);
	}

	public void addprojectionList(projectionListType value) {
		appendDomElement(null, "projectionList", value);	
	}

	public void insertprojectionListAt(projectionListType value, int index) {
		insertDomElementAt(null, "projectionList", index, value);
	}

	public void replaceprojectionListAt(projectionListType value, int index) {
		replaceDomElementAt(null, "projectionList", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
