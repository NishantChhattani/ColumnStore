/**
 * columnListType.java
 *
 * This file was generated by XMLSpy 2006r3sp1 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.dbconfig;

import com.altova.types.*;

public class columnListType extends com.altova.xml.Node {

	public columnListType(columnListType node) {
		super(node);
	}

	public columnListType(org.w3c.dom.Node node) {
		super(node);
	}

	public columnListType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public columnListType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "column" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "column", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new columnType(tmpNode).adjustPrefix();
		}
	}

	public static int getcolumnMinCount() {
		return 1;
	}

	public static int getcolumnMaxCount() {
		return 1;
	}

	public int getcolumnCount() {
		return getDomChildCount(Element, null, "column");
	}

	public boolean hascolumn() {
		return hasDomChild(Element, null, "column");
	}

	public columnType newcolumn() {
		return new columnType(domNode.getOwnerDocument().createElementNS(null, "column"));
	}

	public columnType getcolumnAt(int index) throws Exception {
		return new columnType(dereference(getDomChildAt(Element, null, "column", index)));
	}

	public org.w3c.dom.Node getStartingcolumnCursor() throws Exception {
		return getDomFirstChild(Element, null, "column" );
	}

	public org.w3c.dom.Node getAdvancedcolumnCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "column", curNode );
	}

	public columnType getcolumnValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new columnType( dereference(curNode) );
	}

	public columnType getcolumn() throws Exception 
 {
		return getcolumnAt(0);
	}

	public void removecolumnAt(int index) {
		removeDomChildAt(Element, null, "column", index);
	}

	public void removecolumn() {
		removecolumnAt(0);
	}

	public void addcolumn(columnType value) {
		appendDomElement(null, "column", value);	
	}

	public void insertcolumnAt(columnType value, int index) {
		insertDomElementAt(null, "column", index, value);
	}

	public void replacecolumnAt(columnType value, int index) {
		replaceDomElementAt(null, "column", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
