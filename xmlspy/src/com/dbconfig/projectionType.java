/**
 * projectionType.java
 *
 * This file was generated by XMLSpy 2006r3sp1 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.dbconfig;

import com.altova.types.*;

public class projectionType extends com.altova.xml.Node {

	public projectionType(projectionType node) {
		super(node);
	}

	public projectionType(org.w3c.dom.Node node) {
		super(node);
	}

	public projectionType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public projectionType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "projName" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "projName", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "anchorTable" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "anchorTable", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "columnList" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "columnList", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new columnListType(tmpNode).adjustPrefix();
		}
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "sortKey" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "sortKey", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
			new sortKeyType(tmpNode).adjustPrefix();
		}
	}

	public static int getprojNameMinCount() {
		return 1;
	}

	public static int getprojNameMaxCount() {
		return 1;
	}

	public int getprojNameCount() {
		return getDomChildCount(Element, null, "projName");
	}

	public boolean hasprojName() {
		return hasDomChild(Element, null, "projName");
	}

	public com.altova.xml.AnyTypeNode newprojName() {
		return new com.altova.xml.AnyTypeNode(domNode.getOwnerDocument().createElementNS(null, "projName"));
	}

	public com.altova.xml.AnyTypeNode getprojNameAt(int index) throws Exception {
		return new com.altova.xml.AnyTypeNode(dereference(getDomChildAt(Element, null, "projName", index)));
	}

	public org.w3c.dom.Node getStartingprojNameCursor() throws Exception {
		return getDomFirstChild(Element, null, "projName" );
	}

	public org.w3c.dom.Node getAdvancedprojNameCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "projName", curNode );
	}

	public com.altova.xml.AnyTypeNode getprojNameValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new com.altova.xml.AnyTypeNode( dereference(curNode) );
	}

	public com.altova.xml.AnyTypeNode getprojName() throws Exception 
 {
		return getprojNameAt(0);
	}

	public void removeprojNameAt(int index) {
		removeDomChildAt(Element, null, "projName", index);
	}

	public void removeprojName() {
		removeprojNameAt(0);
	}

	public void addprojName(com.altova.xml.AnyTypeNode value) {
		appendDomElement(null, "projName", value);	
	}

	public void insertprojNameAt(com.altova.xml.AnyTypeNode value, int index) {
		insertDomElementAt(null, "projName", index, value);
	}

	public void replaceprojNameAt(com.altova.xml.AnyTypeNode value, int index) {
		replaceDomElementAt(null, "projName", index, value);
	}

	public static int getanchorTableMinCount() {
		return 1;
	}

	public static int getanchorTableMaxCount() {
		return 1;
	}

	public int getanchorTableCount() {
		return getDomChildCount(Element, null, "anchorTable");
	}

	public boolean hasanchorTable() {
		return hasDomChild(Element, null, "anchorTable");
	}

	public com.altova.xml.AnyTypeNode newanchorTable() {
		return new com.altova.xml.AnyTypeNode(domNode.getOwnerDocument().createElementNS(null, "anchorTable"));
	}

	public com.altova.xml.AnyTypeNode getanchorTableAt(int index) throws Exception {
		return new com.altova.xml.AnyTypeNode(dereference(getDomChildAt(Element, null, "anchorTable", index)));
	}

	public org.w3c.dom.Node getStartinganchorTableCursor() throws Exception {
		return getDomFirstChild(Element, null, "anchorTable" );
	}

	public org.w3c.dom.Node getAdvancedanchorTableCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "anchorTable", curNode );
	}

	public com.altova.xml.AnyTypeNode getanchorTableValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new com.altova.xml.AnyTypeNode( dereference(curNode) );
	}

	public com.altova.xml.AnyTypeNode getanchorTable() throws Exception 
 {
		return getanchorTableAt(0);
	}

	public void removeanchorTableAt(int index) {
		removeDomChildAt(Element, null, "anchorTable", index);
	}

	public void removeanchorTable() {
		removeanchorTableAt(0);
	}

	public void addanchorTable(com.altova.xml.AnyTypeNode value) {
		appendDomElement(null, "anchorTable", value);	
	}

	public void insertanchorTableAt(com.altova.xml.AnyTypeNode value, int index) {
		insertDomElementAt(null, "anchorTable", index, value);
	}

	public void replaceanchorTableAt(com.altova.xml.AnyTypeNode value, int index) {
		replaceDomElementAt(null, "anchorTable", index, value);
	}

	public static int getcolumnListMinCount() {
		return 1;
	}

	public static int getcolumnListMaxCount() {
		return 1;
	}

	public int getcolumnListCount() {
		return getDomChildCount(Element, null, "columnList");
	}

	public boolean hascolumnList() {
		return hasDomChild(Element, null, "columnList");
	}

	public columnListType newcolumnList() {
		return new columnListType(domNode.getOwnerDocument().createElementNS(null, "columnList"));
	}

	public columnListType getcolumnListAt(int index) throws Exception {
		return new columnListType(dereference(getDomChildAt(Element, null, "columnList", index)));
	}

	public org.w3c.dom.Node getStartingcolumnListCursor() throws Exception {
		return getDomFirstChild(Element, null, "columnList" );
	}

	public org.w3c.dom.Node getAdvancedcolumnListCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "columnList", curNode );
	}

	public columnListType getcolumnListValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new columnListType( dereference(curNode) );
	}

	public columnListType getcolumnList() throws Exception 
 {
		return getcolumnListAt(0);
	}

	public void removecolumnListAt(int index) {
		removeDomChildAt(Element, null, "columnList", index);
	}

	public void removecolumnList() {
		removecolumnListAt(0);
	}

	public void addcolumnList(columnListType value) {
		appendDomElement(null, "columnList", value);	
	}

	public void insertcolumnListAt(columnListType value, int index) {
		insertDomElementAt(null, "columnList", index, value);
	}

	public void replacecolumnListAt(columnListType value, int index) {
		replaceDomElementAt(null, "columnList", index, value);
	}

	public static int getsortKeyMinCount() {
		return 1;
	}

	public static int getsortKeyMaxCount() {
		return 1;
	}

	public int getsortKeyCount() {
		return getDomChildCount(Element, null, "sortKey");
	}

	public boolean hassortKey() {
		return hasDomChild(Element, null, "sortKey");
	}

	public sortKeyType newsortKey() {
		return new sortKeyType(domNode.getOwnerDocument().createElementNS(null, "sortKey"));
	}

	public sortKeyType getsortKeyAt(int index) throws Exception {
		return new sortKeyType(dereference(getDomChildAt(Element, null, "sortKey", index)));
	}

	public org.w3c.dom.Node getStartingsortKeyCursor() throws Exception {
		return getDomFirstChild(Element, null, "sortKey" );
	}

	public org.w3c.dom.Node getAdvancedsortKeyCursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "sortKey", curNode );
	}

	public sortKeyType getsortKeyValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new sortKeyType( dereference(curNode) );
	}

	public sortKeyType getsortKey() throws Exception 
 {
		return getsortKeyAt(0);
	}

	public void removesortKeyAt(int index) {
		removeDomChildAt(Element, null, "sortKey", index);
	}

	public void removesortKey() {
		removesortKeyAt(0);
	}

	public void addsortKey(sortKeyType value) {
		appendDomElement(null, "sortKey", value);	
	}

	public void insertsortKeyAt(sortKeyType value, int index) {
		insertDomElementAt(null, "sortKey", index, value);
	}

	public void replacesortKeyAt(sortKeyType value, int index) {
		replaceDomElementAt(null, "sortKey", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
