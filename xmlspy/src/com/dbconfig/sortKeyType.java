/**
 * sortKeyType.java
 *
 * This file was generated by XMLSpy 2006r3sp1 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSpy Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package com.dbconfig;

import com.altova.types.*;

public class sortKeyType extends com.altova.xml.Node {

	public sortKeyType(sortKeyType node) {
		super(node);
	}

	public sortKeyType(org.w3c.dom.Node node) {
		super(node);
	}

	public sortKeyType(org.w3c.dom.Document doc) {
		super(doc);
	}

	public sortKeyType(com.altova.xml.Document doc, String namespaceURI, String prefix, String name) {
		super(doc, namespaceURI, prefix, name);
	}
	
	public void adjustPrefix() {
		for (	org.w3c.dom.Node tmpNode = getDomFirstChild( Element, null, "colURI" );
				tmpNode != null;
				tmpNode = getDomNextChild( Element, null, "colURI", tmpNode )
			) {
			internalAdjustPrefix(tmpNode, true);
		}
	}

	public static int getcolURIMinCount() {
		return 1;
	}

	public static int getcolURIMaxCount() {
		return 1;
	}

	public int getcolURICount() {
		return getDomChildCount(Element, null, "colURI");
	}

	public boolean hascolURI() {
		return hasDomChild(Element, null, "colURI");
	}

	public com.altova.xml.AnyTypeNode newcolURI() {
		return new com.altova.xml.AnyTypeNode(domNode.getOwnerDocument().createElementNS(null, "colURI"));
	}

	public com.altova.xml.AnyTypeNode getcolURIAt(int index) throws Exception {
		return new com.altova.xml.AnyTypeNode(dereference(getDomChildAt(Element, null, "colURI", index)));
	}

	public org.w3c.dom.Node getStartingcolURICursor() throws Exception {
		return getDomFirstChild(Element, null, "colURI" );
	}

	public org.w3c.dom.Node getAdvancedcolURICursor( org.w3c.dom.Node curNode ) throws Exception {
		return getDomNextChild( Element, null, "colURI", curNode );
	}

	public com.altova.xml.AnyTypeNode getcolURIValueAtCursor( org.w3c.dom.Node curNode ) throws Exception {
		if( curNode == null )
			throw new com.altova.xml.XmlException("Out of range");
		else
			return new com.altova.xml.AnyTypeNode( dereference(curNode) );
	}

	public com.altova.xml.AnyTypeNode getcolURI() throws Exception 
 {
		return getcolURIAt(0);
	}

	public void removecolURIAt(int index) {
		removeDomChildAt(Element, null, "colURI", index);
	}

	public void removecolURI() {
		removecolURIAt(0);
	}

	public void addcolURI(com.altova.xml.AnyTypeNode value) {
		appendDomElement(null, "colURI", value);	
	}

	public void insertcolURIAt(com.altova.xml.AnyTypeNode value, int index) {
		insertDomElementAt(null, "colURI", index, value);
	}

	public void replacecolURIAt(com.altova.xml.AnyTypeNode value, int index) {
		replaceDomElementAt(null, "colURI", index, value);
	}

	private org.w3c.dom.Node dereference(org.w3c.dom.Node node) {
		return node;
	}
}
